// <auto-generated />
using System;
using AudiobookManager.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AudiobookManager.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221118133527_Audiobooks added to db")]
    partial class Audiobooksaddedtodb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("AudiobookGenre", b =>
                {
                    b.Property<long>("BooksId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("books_id");

                    b.Property<long>("GenresId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("genres_id");

                    b.HasKey("BooksId", "GenresId")
                        .HasName("pk_audiobook_genre");

                    b.HasIndex("GenresId")
                        .HasDatabaseName("ix_audiobook_genre_genres_id");

                    b.ToTable("audiobook_genre", (string)null);
                });

            modelBuilder.Entity("AudiobookManager.Database.Models.Audiobook", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Asin")
                        .HasColumnType("TEXT")
                        .HasColumnName("asin");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("book_name");

                    b.Property<string>("Copyright")
                        .HasColumnType("TEXT")
                        .HasColumnName("copyright");

                    b.Property<string>("CoverFilePath")
                        .HasColumnType("TEXT")
                        .HasColumnName("cover_file_path");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<int?>("DurationInSeconds")
                        .HasColumnType("INTEGER")
                        .HasColumnName("duration_in_seconds");

                    b.Property<string>("FileInfoFileName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("file_info_file_name");

                    b.Property<string>("FileInfoFullPath")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("file_info_full_path");

                    b.Property<long>("FileInfoSizeInBytes")
                        .HasColumnType("INTEGER")
                        .HasColumnName("file_info_size_in_bytes");

                    b.Property<string>("Publisher")
                        .HasColumnType("TEXT")
                        .HasColumnName("publisher");

                    b.Property<string>("Rating")
                        .HasColumnType("TEXT")
                        .HasColumnName("rating");

                    b.Property<string>("Series")
                        .HasColumnType("TEXT")
                        .HasColumnName("series");

                    b.Property<string>("SeriesPart")
                        .HasColumnType("TEXT")
                        .HasColumnName("series_part");

                    b.Property<string>("Subtitle")
                        .HasColumnType("TEXT")
                        .HasColumnName("subtitle");

                    b.Property<string>("Www")
                        .HasColumnType("TEXT")
                        .HasColumnName("www");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_audiobooks");

                    b.ToTable("audiobooks", (string)null);
                });

            modelBuilder.Entity("AudiobookManager.Database.Models.Genre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_genres");

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("AudiobookManager.Database.Models.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_persons");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_persons_name");

                    b.ToTable("persons", (string)null);
                });

            modelBuilder.Entity("AudiobookManager.Database.Models.SeriesMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("MappedSeries")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("mapped_series");

                    b.Property<string>("Regex")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("regex");

                    b.Property<bool>("WarnAboutPart")
                        .HasColumnType("INTEGER")
                        .HasColumnName("warn_about_part");

                    b.HasKey("Id")
                        .HasName("pk_series_mapping");

                    b.HasIndex(new[] { "Regex" }, "ix_series_mapping_regex")
                        .IsUnique()
                        .HasDatabaseName("ix_series_mapping_regex");

                    b.ToTable("series_mapping", (string)null);
                });

            modelBuilder.Entity("audiobooks_authors_persons", b =>
                {
                    b.Property<long>("AuthorsId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("authors_id");

                    b.Property<long>("BooksAuthoredId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("books_authored_id");

                    b.HasKey("AuthorsId", "BooksAuthoredId")
                        .HasName("pk_audiobooks_authors_persons");

                    b.HasIndex("BooksAuthoredId")
                        .HasDatabaseName("ix_audiobooks_authors_persons_books_authored_id");

                    b.ToTable("audiobooks_authors_persons", (string)null);
                });

            modelBuilder.Entity("audiobooks_narrators_persons", b =>
                {
                    b.Property<long>("BooksNarratedId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("books_narrated_id");

                    b.Property<long>("NarratorsId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("narrators_id");

                    b.HasKey("BooksNarratedId", "NarratorsId")
                        .HasName("pk_audiobooks_narrators_persons");

                    b.HasIndex("NarratorsId")
                        .HasDatabaseName("ix_audiobooks_narrators_persons_narrators_id");

                    b.ToTable("audiobooks_narrators_persons", (string)null);
                });

            modelBuilder.Entity("AudiobookGenre", b =>
                {
                    b.HasOne("AudiobookManager.Database.Models.Audiobook", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audiobook_genre_audiobooks_books_id");

                    b.HasOne("AudiobookManager.Database.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audiobook_genre_genres_genres_id");
                });

            modelBuilder.Entity("audiobooks_authors_persons", b =>
                {
                    b.HasOne("AudiobookManager.Database.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audiobooks_authors_persons_persons_authors_id");

                    b.HasOne("AudiobookManager.Database.Models.Audiobook", null)
                        .WithMany()
                        .HasForeignKey("BooksAuthoredId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audiobooks_authors_persons_audiobooks_books_authored_id");
                });

            modelBuilder.Entity("audiobooks_narrators_persons", b =>
                {
                    b.HasOne("AudiobookManager.Database.Models.Audiobook", null)
                        .WithMany()
                        .HasForeignKey("BooksNarratedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audiobooks_narrators_persons_audiobooks_books_narrated_id");

                    b.HasOne("AudiobookManager.Database.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("NarratorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audiobooks_narrators_persons_persons_narrators_id");
                });
#pragma warning restore 612, 618
        }
    }
}
